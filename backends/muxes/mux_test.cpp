
#include <helib/FHE.h>

#include "mux-common.hpp"

#ifdef DEBUG
#define show(x) _show(info, x, #x, 83)
#else
#define show(x)
#endif

void _show(EncInfo & info, ctxt_bit vec, std::string name, int size)
{
    std::cout << name << ": ";
    auto decrypted = decrypt_vector(info, vec);
    for (int i = 0; i < size; i++) {
        std::cout << decrypted[i];
    }
    std::cout << "\n";
}

std::vector<int> lanes()
{
    return std::vector<int>{7, 52, 47};
}

compute_data Prep(EncInfo & info, std::unordered_map<std::string, int> inputs)
{

    compute_data data;
    int pad_count = 1;
    
    ptxt t0{inputs["input#5.2"], inputs["input#5.2"], 1, 0, inputs["input#5.2"], 1, inputs["input#5.1"], inputs["input#5.0"], 1, 1, 0, inputs["input#5.0"], inputs["input#5.0"], 1, inputs["input#5.0"], inputs["input#5.1"], inputs["input#5.1"], inputs["input#5.0"], 1, inputs["input#5.1"], 1, inputs["input#5.2"], inputs["input#5.1"], inputs["input#5.2"], inputs["input#5.0"], inputs["input#5.2"], inputs["input#5.2"], 1, 1, inputs["input#5.2"], inputs["input#5.1"], inputs["input#5.1"], inputs["input#5.2"], inputs["input#5.0"], 1, inputs["input#5.2"], inputs["input#5.2"], inputs["input#5.2"], inputs["input#5.2"], 1, inputs["input#5.2"], 1, 1, 1, 0, 1, inputs["input#5.1"], 1, 1, inputs["input#5.1"], 0, 0, inputs["input#5.2"], inputs["input#5.1"], 1, 0, inputs["input#5.2"], 1, 1, inputs["input#5.2"], inputs["input#5.1"], 0, 1, inputs["input#5.2"], inputs["input#5.2"], inputs["input#5.2"], 1, inputs["input#5.0"], inputs["input#5.0"], inputs["input#5.2"], 0, inputs["input#5.2"], inputs["input#5.2"], 1, 1, 1, 1, inputs["input#5.1"], inputs["input#5.2"], 1, inputs["input#5.1"]};
    data.ciphertexts.push_back(encrypt_vector(info, t0, pad_count, 1));
    ptxt t1{1, 1, inputs["input#5.0"], 0, 1, inputs["input#5.1"], 1, 1, inputs["input#5.0"], inputs["input#5.0"], 0, 1, 1, inputs["input#5.1"], 1, 1, 1, 1, inputs["input#5.2"], 1, inputs["input#5.0"], 1, 1, 1, 1, 1, 1, inputs["input#5.1"], inputs["input#5.2"], 1, 1, 1, 1, 1, inputs["input#5.1"], 1, 1, 1, 1, inputs["input#5.0"], 1, inputs["input#5.2"], inputs["input#5.1"], inputs["input#5.0"], 0, inputs["input#5.0"], 1, inputs["input#5.0"], inputs["input#5.1"], 1, 0, 0, 1, 1, inputs["input#5.1"], 0, 1, inputs["input#5.0"], inputs["input#5.0"], 1, 1, 0, inputs["input#5.1"], 1, 1, 1, inputs["input#5.1"], 1, 1, 1, 0, 1, 1, inputs["input#5.0"], inputs["input#5.1"], inputs["input#5.0"], inputs["input#5.1"], 1, 1, inputs["input#5.1"], 1};
    data.ciphertexts.push_back(encrypt_vector(info, t1, pad_count, 1));
    ptxt t2{0, 0, 0, inputs["input#5.1"], 0, 0, 0, 0, 0, 0, inputs["input#5.1"], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, inputs["input#5.0"], 0, 0, 0, 0, 0, inputs["input#5.0"], inputs["input#5.0"], 0, 0, 0, inputs["input#5.0"], 0, 0, 0, 0, 0, inputs["input#5.0"], 0, 0, 0, 0, 0, 0, 0, 0, inputs["input#5.0"], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    data.ciphertexts.push_back(encrypt_vector(info, t2, pad_count, 1));
    ptxt t3{0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0};
    data.plaintexts.push_back(encode_vector(info, t3, pad_count, 1));
    ptxt t9{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, inputs["input#1.0"], 0, inputs["input#0.0"], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, inputs["input#1.1"], 0, 0, 0, 0, 0, 0, 0, 0, inputs["input#0.2"], 0, 0, 0, 0, inputs["input#0.1"], inputs["input#1.2"], 0, 0, 0, 0, 0, 0, 0, 0};
    data.ciphertexts.push_back(encrypt_vector(info, t9, pad_count, 1));
    ptxt t12{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    data.plaintexts.push_back(encode_vector(info, t12, pad_count, 1));
    ptxt t14{0, 0, inputs["input#2.2"], 0, 0, 0, 0, 0, 0, 0, inputs["input#3.1"], 0, 0, 0, inputs["input#2.1"], inputs["input#4.0"], 0, 0, 0, inputs["input#4.1"], inputs["input#4.2"], 0, 0, 0, 0, 0, 0, 0, inputs["input#2.0"], 0, 0, 0, 0, inputs["input#3.0"], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, inputs["input#3.2"], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    data.ciphertexts.push_back(encrypt_vector(info, t14, pad_count, 1));
    ptxt t16{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    data.plaintexts.push_back(encode_vector(info, t16, pad_count, 1));
    data.masks["000000000000000000000000000100000000000000000000000000000000000000000000000000000"] = make_mask(info, "000000000000000000000000000100000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000000000000000000000001000000001000000000"] = make_mask(info, "000000000000000000000000000000000000000000000000000000000000001000000001000000000", pad_count, 1);
    data.masks["000000000000001000000000000000000000010000000000000000000000000000000000000000000"] = make_mask(info, "000000000000001000000000000000000000010000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000010000000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "000000000000000010000000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000000000000000000100000000000000000000000"] = make_mask(info, "000000000000000000000000000000000000000000000000000000000100000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000001000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "000000000000000000000001000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000100000000000000000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "000000100000000000000000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000010000000000000000000000000000000000000010000"] = make_mask(info, "000000000000000000000000000000000000010000000000000000000000000000000000000010000", pad_count, 1);
    data.masks["000000100000000001000000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "000000100000000001000000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000100000000000000000000000000000000000000000000000000000000"] = make_mask(info, "000000000000000000000000100000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000001000000000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "000000000000001000000000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000010000000000000000000000000000000000000000"] = make_mask(info, "000000000000000000000000000000000000000010000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000001000000000000000000100000000000000000000000000000000000000000"] = make_mask(info, "000000000000000000001000000000000000000100000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000010000010000000000000000000000000000000000000000000000000"] = make_mask(info, "000000000000000000000000010000010000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000000001000000000000000000000000000000000"] = make_mask(info, "000000000000000000000000000000000000000000000001000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000100000000000000000000000000000000000000000000000"] = make_mask(info, "000000000000000000000000000000000100000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000000000000000000000010000000000000000000"] = make_mask(info, "000000000000000000000000000000000000000000000000000000000000010000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000000100000000000000001000000001000000000"] = make_mask(info, "000000000000000000000000000000000000000000000100000000000000001000000001000000000", pad_count, 1);
    data.masks["001000000000000000000000000000000000000000000000000000100000000000000000000000000"] = make_mask(info, "001000000000000000000000000000000000000000000000000000100000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000010000000000000000000100000000000000000000"] = make_mask(info, "000000000000000000000000000000000000000010000000000000000000100000000000000000000", pad_count, 1);
    data.masks["000000000000000100000000000010000000000000000000000000000000000000000000000000000"] = make_mask(info, "000000000000000100000000000010000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000001000000000000000000000000000000000000"] = make_mask(info, "000000000000000000000000000000000000000000001000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000100000000000010000010000000000000000000000000000000000000000000000000000000"] = make_mask(info, "000000100000000000010000010000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000000000000000000000100000000000000000000"] = make_mask(info, "000000000000000000000000000000000000000000000000000000000000100000000000000000000", pad_count, 1);
    data.masks["000000000000000000001000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "000000000000000000001000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000000000000000000000000000000000000001000"] = make_mask(info, "000000000000000000000000000000000000000000000000000000000000000000000000000001000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000000100000000000000000000000000000000000"] = make_mask(info, "000000000000000000000000000000000000000000000100000000000000000000000000000000000", pad_count, 1);
    data.masks["000001000000000000001000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "000001000000000000001000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000010000000000000000000000000000000000100000000000000000000000000000000000000"] = make_mask(info, "000000010000000000000000000000000000000000100000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000000000000000000100000000000000000000001"] = make_mask(info, "000000000000000000000000000000000000000000000000000000000100000000000000000000001", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000000000010000000000000000000000000001000"] = make_mask(info, "000000000000000000000000000000000000000000000000010000000000000000000000000001000", pad_count, 1);
    data.masks["000000000000100000000000010000000000000000000000000000000000000000000000000000000"] = make_mask(info, "000000000000100000000000010000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000000010000000000000000000000000000000000"] = make_mask(info, "000000000000000000000000000000000000000000000010000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000001000000000000000000000000000000000000000000000"] = make_mask(info, "000000000000000000000000000000000001000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000001000000000000000000000000000000001000000000000000000000000000000000000000"] = make_mask(info, "000000001000000000000000000000000000000001000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000000000000000000001000000000000000000000"] = make_mask(info, "000000000000000000000000000000000000000000000000000000000001000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000000000000000000000000000010000000000000"] = make_mask(info, "000000000000000000000000000000000000000000000000000000000000000000010000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000000000000000000000000000000000010000000"] = make_mask(info, "000000000000000000000000000000000000000000000000000000000000000000000000010000000", pad_count, 1);
    data.masks["000000010000000000000001000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "000000010000000000000001000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000000010000000000001000000000000000000000"] = make_mask(info, "000000000000000000000000000000000000000000000010000000000001000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000001000000000000000000000000000000000000000"] = make_mask(info, "000000000000000000000000000000000000000001000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000011000000100000000000000000000000000000000000000000000010000000000000"] = make_mask(info, "000000000000011000000100000000000000000000000000000000000000000000010000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000000000000000000000000000000000000010000"] = make_mask(info, "000000000000000000000000000000000000000000000000000000000000000000000000000010000", pad_count, 1);
    data.masks["000100000010000000000000000000000000000000001000001100010000010000000010000000000"] = make_mask(info, "000100000010000000000000000000000000000000001000001100010000010000000010000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000100000000000100000000000000100000000000000"] = make_mask(info, "000000000000000000000000000000000000000100000000000100000000000000100000000000000", pad_count, 1);
    data.masks["000000000000000000000000101000000000000000000000000000000100000000100001100000000"] = make_mask(info, "000000000000000000000000101000000000000000000000000000000100000000100001100000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000000000000000001000000000000000000000000"] = make_mask(info, "000000000000000000000000000000000000000000000000000000001000000000000000000000000", pad_count, 1);
    data.masks["000000001000000000000000000001000000000000000000000000000000000000000000000000000"] = make_mask(info, "000000001000000000000000000001000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000000000000000100000000000000000000000000"] = make_mask(info, "000000000000000000000000000000000000000000000000000000100000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000001000000010000100000000000000000000000000000"] = make_mask(info, "000000000000000000000000000000000000001000000010000100000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000100000000000000000000000000000000000000000000001000000000"] = make_mask(info, "000000000000000000000000100000000000000000000000000000000000000000000001000000000", pad_count, 1);
    data.masks["000000000000000001000000000000000000000000000000000100000000000000000000000000000"] = make_mask(info, "000000000000000001000000000000000000000000000000000100000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000001100000000000000000000000000000000000000000000000000000000"] = make_mask(info, "000000000000000000000001100000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000000000000000000000000100000000000000000"] = make_mask(info, "000000000000000000000000000000000000000000000000000000000000000100000000000000000", pad_count, 1);
    data.masks["000000000010000000000000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "000000000010000000000000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000010000010000000000000000000000000000000000"] = make_mask(info, "000000000000000000000000000000000000000010000010000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000000000000000000000000000000001000000000"] = make_mask(info, "000000000000000000000000000000000000000000000000000000000000000000000001000000000", pad_count, 1);
    data.masks["000000000000000001000000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "000000000000000001000000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000000000000100000000000000000000000000000"] = make_mask(info, "000000000000000000000000000000000000000000000000000100000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000000000000000100000000000000000000001000"] = make_mask(info, "000000000000000000000000000000000000000000000000000000100000000000000000000001000", pad_count, 1);
    data.masks["000000000000100000000000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "000000000000100000000000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000010000100000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "000000000000010000100000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000010000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "000000000000000000010000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000000000000000010000000000000000000000000"] = make_mask(info, "000000000000000000000000000000000000000000000000000000010000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000001000000000000000000000000000000000000000100000100000000"] = make_mask(info, "000000000000000000000000001000000000000000000000000000000000000000100000100000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000000000000000000000000000000000001000000"] = make_mask(info, "000000000000000000000000000000000000000000000000000000000000000000000000001000000", pad_count, 1);
    data.masks["000000000000000000000000000000000100000000000000000000100000000000000000000000000"] = make_mask(info, "000000000000000000000000000000000100000000000000000000100000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000000100000000000000010000000000000000000"] = make_mask(info, "000000000000000000000000000000000000000000000100000000000000010000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000001000000000000000000000000000000000000000000000000000"] = make_mask(info, "000000000000000000000000000001000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000010000000000000000000000000100000000000000000000000000000000000"] = make_mask(info, "000000000000000000010000000000000000000000000100000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000100000000000100000000000000000000000000000000000000000000000000"] = make_mask(info, "000000000000000000100000000000100000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000010000000000000000000000000000000000000000000000000000000000000010000000000000"] = make_mask(info, "000010000000000000000000000000000000000000000000000000000000000000010000000000000", pad_count, 1);
    data.masks["000000000000000000000100000000000000010000000000000000000000000000000000000000000"] = make_mask(info, "000000000000000000000100000000000000010000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000000000000000000000000000000000000000001"] = make_mask(info, "000000000000000000000000000000000000000000000000000000000000000000000000000000001", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000000000000010000000000000000000000000000"] = make_mask(info, "000000000000000000000000000000000000000000000000000010000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000001000000010000000000000000000000000000"] = make_mask(info, "000000000000000000000000000000000000000000001000000010000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000100000000000000000010010000010000000000000000000000000000"] = make_mask(info, "000000000000000000000000100000000000000000010010000010000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000000000010000000000000000000000000000000"] = make_mask(info, "000000000000000000000000000000000000000000000000010000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000100000000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "000000000000000100000000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000100100000000000000000000000000000000000000000000000000000000000000000000110"] = make_mask(info, "000000100100000000000000000000000000000000000000000000000000000000000000000000110", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000000000000000010001000000000000000000000"] = make_mask(info, "000000000000000000000000000000000000000000000000000000010001000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000001000000000000000000000000001000000000000000000000000"] = make_mask(info, "000000000000000000000000000001000000000000000000000000001000000000000000000000000", pad_count, 1);
    data.masks["000000000000000010000000001000000000000000000000000000000000000000000000000000000"] = make_mask(info, "000000000000000010000000001000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000100001000000000000000000000000000000000"] = make_mask(info, "000000000000000000000000000000000000000000100001000000000000000000000000000000000", pad_count, 1);
    data.masks["000010000000000000000000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "000010000000000000000000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000001000000000000000000000000000000000010000000000000000000000000000000000000000"] = make_mask(info, "000001000000000000000000000000000000000010000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000100000000010000000000000000000000000000000000000000000000000000"] = make_mask(info, "000000000000000000100000000010000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000100000000000000000000000000000000000000"] = make_mask(info, "000000000000000000000000000000000000000000100000000000000000000000000000000000000", pad_count, 1);
    data.masks["010000000000000000000000000000010100000100000000000000000000000001000000000000000"] = make_mask(info, "010000000000000000000000000000010100000100000000000000000000000001000000000000000", pad_count, 1);
    data.masks["000001000000000000000000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "000001000000000000000000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000000000000000000000000000100000000000000"] = make_mask(info, "000000000000000000000000000000000000000000000000000000000000000000100000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000010000000000000000000000000000000000000"] = make_mask(info, "000000000000000000000000000000000000000000010000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000010000000000000000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "000000010000000000000000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000000000000000000000100000000000000000000000000000000"] = make_mask(info, "000000000000000000000000000000000000000000000000100000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000010000000000000000000000000000000000000000000000000000"] = make_mask(info, "000000000000000000000000000010000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000010000010000000000000000000000000000000000000000000000000000000"] = make_mask(info, "000000000000000000010000010000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000100000000000000000000000000000000000000000000000000100000000000000"] = make_mask(info, "000000000000000100000000000000000000000000000000000000000000000000100000000000000", pad_count, 1);
    data.masks["001000000000000000000000000000001000000000000000000000000000000000000000000000000"] = make_mask(info, "001000000000000000000000000000001000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000000000000010000000000010000000000000000000000000000000000000"] = make_mask(info, "000000000000000000000000000000010000000000010000000000000000000000000000000000000", pad_count, 1);
    data.masks["000000000000000000000001000000000000001000000000000000000000000000000000000000000"] = make_mask(info, "000000000000000000000001000000000000001000000000000000000000000000000000000000000", pad_count, 1);
    return data;
}

ctxt_bit Compute(EncInfo & info, compute_data data)
{
    ctxt_bit v0 = data.ciphertexts[0];
    v0 += data.ciphertexts[1];
    show(v0);
    ctxt_bit s0 = v0;
    info.context.getEA().rotate(s0, 4);
    show(s0);
    ctxt_bit s1 = v0;
    info.context.getEA().rotate(s1, 6);
    show(s1);
    ctxt_bit s2 = v0;
    info.context.getEA().rotate(s2, 1);
    show(s2);
    ctxt_bit s3 = v0;
    info.context.getEA().rotate(s3, 9);
    show(s3);
    ctxt_bit s4 = v0;
    info.context.getEA().rotate(s4, -8);
    show(s4);
    ctxt_bit s5 = v0;
    info.context.getEA().rotate(s5, 11);
    show(s5);
    ctxt_bit s6 = v0;
    info.context.getEA().rotate(s6, -16);
    show(s6);
    ctxt_bit s7 = v0;
    info.context.getEA().rotate(s7, -6);
    show(s7);
    ctxt_bit s8 = v0;
    info.context.getEA().rotate(s8, -15);
    show(s8);
    ctxt_bit s9 = v0;
    info.context.getEA().rotate(s9, -1);
    show(s9);
    ctxt_bit s10 = v0;
    info.context.getEA().rotate(s10, -13);
    show(s10);
    ctxt_bit s11 = v0;
    info.context.getEA().rotate(s11, 15);
    show(s11);
    ctxt_bit s12 = v0;
    info.context.getEA().rotate(s12, -24);
    show(s12);
    ctxt_bit s13 = v0;
    info.context.getEA().rotate(s13, 31);
    show(s13);
    ctxt_bit t4 = blend_bits({{s4, data.masks["010000000000000000000000000000010100000100000000000000000000000001000000000000000"]}, {s6, data.masks["001000000000000000000000000000001000000000000000000000000000000000000000000000000"]}, {s0, data.masks["000000100100000000000000000000000000000000000000000000000000000000000000000000110"]}, {s7, data.masks["000000000000001000000000000000000000010000000000000000000000000000000000000000000"]}, {s10, data.masks["000000000000000100000000000000000000000000000000000000000000000000100000000000000"]}, {s13, data.masks["000000000000000010000000001000000000000000000000000000000000000000000000000000000"]}, {s3, data.masks["000000000000000001000000000000000000000000000000000000000000000000000000000000000"]}, {s12, data.masks["000000000000000000100000000000100000000000000000000000000000000000000000000000000"]}, {s5, data.masks["000000000000000000000000100000000000000000000000000000000000000000000000000000000"]}, {v0, data.masks["000000000000000000000000000100000000000000000000000000000000000000000000000000000"]}, {s8, data.masks["000000000000000000000000000000000000000000010000000000000000000000000000000000000"]}, {s2, data.masks["000000000000000000000000000000000000000000000010000000000000000000000000000000000"]}, {s11, data.masks["000000000000000000000000000000000000000000000000010000000000000000000000000001000"]}, {s1, data.masks["000000000000000000000000000000000000000000000000000000000000000100000000000000000"]}, {data.ciphertexts[2], data.masks["000100000010000000000000000000000000000000001000001100010000010000000010000000000"]}});
    ctxt_bit v1 = t4;
    v1 += data.plaintexts[0];
    show(v1);
    ctxt_bit s14 = v1;
    info.context.getEA().rotate(s14, -38);
    show(s14);
    ctxt_bit s15 = v1;
    info.context.getEA().rotate(s15, -67);
    show(s15);
    ctxt_bit s16 = v1;
    info.context.getEA().rotate(s16, 4);
    show(s16);
    ctxt_bit s17 = v1;
    info.context.getEA().rotate(s17, 6);
    show(s17);
    ctxt_bit s18 = v1;
    info.context.getEA().rotate(s18, -12);
    show(s18);
    ctxt_bit s19 = v1;
    info.context.getEA().rotate(s19, -44);
    show(s19);
    ctxt_bit s20 = v1;
    info.context.getEA().rotate(s20, -3);
    show(s20);
    ctxt_bit s21 = v1;
    info.context.getEA().rotate(s21, -24);
    show(s21);
    ctxt_bit s22 = v1;
    info.context.getEA().rotate(s22, -26);
    show(s22);
    ctxt_bit s23 = v1;
    info.context.getEA().rotate(s23, 1);
    show(s23);
    ctxt_bit s24 = v1;
    info.context.getEA().rotate(s24, -1);
    show(s24);
    ctxt_bit s25 = v1;
    info.context.getEA().rotate(s25, -66);
    show(s25);
    ctxt_bit s26 = v1;
    info.context.getEA().rotate(s26, -50);
    show(s26);
    ctxt_bit s27 = v1;
    info.context.getEA().rotate(s27, -71);
    show(s27);
    ctxt_bit s28 = v1;
    info.context.getEA().rotate(s28, -35);
    show(s28);
    ctxt_bit t5 = blend_bits({{s2, data.masks["000000010000000000000001000000000000000000000000000000000000000000000000000000000"]}, {s4, data.masks["000000001000000000000000000000000000000001000000000000000000000000000000000000000"]}, {s0, data.masks["000000000000000000010000000000000000000000000000000000000000000000000000000000000"]}, {s3, data.masks["000000000000000000000000000010000000000000000000000000000000000000000000000000000"]}, {s12, data.masks["000000000000000000000000000001000000000000000000000000001000000000000000000000000"]}, {s11, data.masks["000000000000000000000000000000000000000000000100000000000000010000000000000000000"]}, {s10, data.masks["000000000000000000000000000000000000000000000001000000000000000000000000000000000"]}, {s7, data.masks["000000000000000000000000000000000000000000000000000000000000000000000001000000000"]}});
    ctxt_bit t6 = blend_bits({{s1, data.masks["000000010000000000000000000000000000000000000000000000000000000000000000000000000"]}, {s0, data.masks["000000001000000000000000000001000000000000000000000000000000000000000000000000000"]}, {s6, data.masks["000000000000000000010000000000000000000000000000000000000000000000000000000000000"]}, {s7, data.masks["000000000000000000000001000000000000000000000000000000000000000000000000000000000"]}, {s13, data.masks["000000000000000000000000000010000000000000000000000000000000000000000000000000000"]}, {s2, data.masks["000000000000000000000000000000000000000001000000000000000000000000000000000000000"]}, {s12, data.masks["000000000000000000000000000000000000000000000100000000000000000000000000000000000"]}, {s5, data.masks["000000000000000000000000000000000000000000000001000000000000000000000000000000000"]}, {s4, data.masks["000000000000000000000000000000000000000000000000000000001000000000000000000000000"]}, {s3, data.masks["000000000000000000000000000000000000000000000000000000000000010000000000000000000"]}, {s9, data.masks["000000000000000000000000000000000000000000000000000000000000000000000001000000000"]}});
    ctxt_bit v2 = t5;
    v2.multiplyBy(t6);
    show(v2);
    ctxt_bit s29 = v2;
    info.context.getEA().rotate(s29, -44);
    show(s29);
    ctxt_bit s30 = v2;
    info.context.getEA().rotate(s30, -3);
    show(s30);
    ctxt_bit s31 = v2;
    info.context.getEA().rotate(s31, -38);
    show(s31);
    ctxt_bit s32 = v2;
    info.context.getEA().rotate(s32, -71);
    show(s32);
    ctxt_bit s33 = v2;
    info.context.getEA().rotate(s33, -26);
    show(s33);
    ctxt_bit s34 = v2;
    info.context.getEA().rotate(s34, -61);
    show(s34);
    ctxt_bit s35 = v2;
    info.context.getEA().rotate(s35, -12);
    show(s35);
    ctxt_bit t7 = blend_bits({{s18, data.masks["000010000000000000000000000000000000000000000000000000000000000000010000000000000"]}, {s26, data.masks["000001000000000000000000000000000000000000000000000000000000000000000000000000000"]}, {s21, data.masks["000000100000000000010000010000000000000000000000000000000000000000000000000000000"]}, {s16, data.masks["000000010000000000000000000000000000000000000000000000000000000000000000000000000"]}, {s6, data.masks["000000000000000100000000000000000000000000000000000000000000000000000000000000000"]}, {s17, data.masks["000000000000000010000000000000000000000000000000000000000000000000000000000000000"]}, {s22, data.masks["000000000000000000001000000000000000000100000000000000000000000000000000000000000"]}, {s20, data.masks["000000000000000000000001100000000000000000000000000000000000000000000000000000000"]}, {s28, data.masks["000000000000000000000000000000010000000000010000000000000000000000000000000000000"]}, {s15, data.masks["000000000000000000000000000000000000001000000010000100000000000000000000000000000"]}, {s14, data.masks["000000000000000000000000000000000000000000001000000010000000000000000000000000000"]}, {s23, data.masks["000000000000000000000000000000000000000000000100000000000000001000000001000000000"]}, {s24, data.masks["000000000000000000000000000000000000000000000000010000000000000000000000000000000"]}, {s19, data.masks["000000000000000000000000000000000000000000000000000000010000000000000000000000000"]}, {s25, data.masks["000000000000000000000000000000000000000000000000000000000000000000100000000000000"]}, {v1, data.masks["000000000000000000000000000000000000000000000000000000000000000000000000000001000"]}});
    ctxt_bit t8 = blend_bits({{s0, data.masks["000010000000000000000000000000000000000000000000000000000000000000000000000000000"]}, {s30, data.masks["000001000000000000001000000000000000000000000000000000000000000000000000000000000"]}, {s8, data.masks["000000100000000000000000000000000000000000000000000000000000000000000000000000000"]}, {s22, data.masks["000000010000000000000000000000000000000000000000000000000000000000000000000000000"]}, {v1, data.masks["000000000000000100000000000000000000000000000000000000000000000000000000000000000"]}, {s15, data.masks["000000000000000010000000000000000000000000000000000000000000000000000000000000000"]}, {s33, data.masks["000000000000000000010000000000000000000000000100000000000000000000000000000000000"]}, {v0, data.masks["000000000000000000000001000000000000001000000000000000000000000000000000000000000"]}, {s10, data.masks["000000000000000000000000100000000000000000010010000010000000000000000000000000000"]}, {s9, data.masks["000000000000000000000000010000010000000000000000000000000000000000000000000000000"]}, {s32, data.masks["000000000000000000000000000000000000000100000000000100000000000000100000000000000"]}, {s29, data.masks["000000000000000000000000000000000000000000001000000000000000000000000000000000000"]}, {s35, data.masks["000000000000000000000000000000000000000000000000010000000000000000000000000000000"]}, {s4, data.masks["000000000000000000000000000000000000000000000000000000010000000000000000000000000"]}, {s31, data.masks["000000000000000000000000000000000000000000000000000000000000001000000001000000000"]}, {s34, data.masks["000000000000000000000000000000000000000000000000000000000000000000010000000000000"]}, {s1, data.masks["000000000000000000000000000000000000000000000000000000000000000000000000000001000"]}});
    ctxt_bit v3 = t7;
    v3.multiplyBy(t8);
    show(v3);
    ctxt_bit s36 = v3;
    info.context.getEA().rotate(s36, -68);
    show(s36);
    ctxt_bit s37 = v3;
    info.context.getEA().rotate(s37, -60);
    show(s37);
    ctxt_bit s38 = v3;
    info.context.getEA().rotate(s38, -76);
    show(s38);
    ctxt_bit s39 = v3;
    info.context.getEA().rotate(s39, 3);
    show(s39);
    ctxt_bit s40 = v3;
    info.context.getEA().rotate(s40, -10);
    show(s40);
    ctxt_bit s41 = v3;
    info.context.getEA().rotate(s41, -51);
    show(s41);
    ctxt_bit s42 = v3;
    info.context.getEA().rotate(s42, -27);
    show(s42);
    ctxt_bit t10 = blend_bits({{v1, data.masks["000000100000000001000000000000000000000000000000000000000000000000000000000000000"]}, {s2, data.masks["000000000000100000000000010000000000000000000000000000000000000000000000000000000"]}, {s1, data.masks["000000000000010000100000000000000000000000000000000000000000000000000000000000000"]}, {v0, data.masks["000000000000001000000000000000000000000000000000000000000000000000000000000000000"]}, {s18, data.masks["000000000000000000010000000000000000000000000000000000000000000000000000000000000"]}, {s0, data.masks["000000000000000000000100000000000000010000000000000000000000000000000000000000000"]}, {s38, data.masks["000000000000000000000000100000000000000000000000000000000000000000000001000000000"]}, {s37, data.masks["000000000000000000000000001000000000000000000000000000000000000000100000100000000"]}, {s15, data.masks["000000000000000000000000000010000000000000000000000000000000000000000000000000000"]}, {s6, data.masks["000000000000000000000000000000000000000000000000000100000000000000000000000000000"]}, {s40, data.masks["000000000000000000000000000000000000000000000000000000000100000000000000000000000"]}, {s9, data.masks["000000000000000000000000000000000000000000000000000000000000000000010000000000000"]}, {s27, data.masks["000000000000000000000000000000000000000000000000000000000000000000000000010000000"]}, {s19, data.masks["000000000000000000000000000000000000000000000000000000000000000000000000000010000"]}});
    ctxt_bit t11 = blend_bits({{v3, data.masks["000000100000000000000000000000000000000000000000000000000000000000000000000000000"]}, {s38, data.masks["000000000000100000000000000000000000000000000000000000000000000000000000000000000"]}, {s40, data.masks["000000000000011000000100000000000000000000000000000000000000000000010000000000000"]}, {s36, data.masks["000000000000000001000000000000000000000000000000000100000000000000000000000000000"]}, {s39, data.masks["000000000000000000100000000010000000000000000000000000000000000000000000000000000"]}, {s42, data.masks["000000000000000000010000010000000000000000000000000000000000000000000000000000000"]}, {s37, data.masks["000000000000000000000000000000000000010000000000000000000000000000000000000010000"]}, {s41, data.masks["000000000000000000000000000000000000000000000000000000000000000000000000010000000"]}, {data.ciphertexts[3], data.masks["000000000000000000000000101000000000000000000000000000000100000000100001100000000"]}});
    ctxt_bit v4 = t10;
    v4.multiplyBy(t11);
    show(v4);
    ctxt_bit s43 = v4;
    info.context.getEA().rotate(s43, -54);
    show(s43);
    ctxt_bit s44 = v4;
    info.context.getEA().rotate(s44, -78);
    show(s44);
    ctxt_bit s45 = v4;
    info.context.getEA().rotate(s45, -7);
    show(s45);
    ctxt_bit s46 = v4;
    info.context.getEA().rotate(s46, -80);
    show(s46);
    ctxt_bit s47 = v4;
    info.context.getEA().rotate(s47, -19);
    show(s47);
    ctxt_bit s48 = v4;
    info.context.getEA().rotate(s48, -17);
    show(s48);
    ctxt_bit s49 = v4;
    info.context.getEA().rotate(s49, -37);
    show(s49);
    ctxt_bit t13 = blend_bits({{s36, data.masks["000000000000000000000000000000000100000000000000000000000000000000000000000000000"]}, {s39, data.masks["000000000000000000000000000000000000000000100001000000000000000000000000000000000"]}, {s42, data.masks["000000000000000000000000000000000000000000001000000000000000000000000000000000000"]}, {v3, data.masks["000000000000000000000000000000000000000000000000010000000000000000000000000000000"]}, {s40, data.masks["000000000000000000000000000000000000000000000000000010000000000000000000000000000"]}});
    ctxt_bit v5 = t13;
    v5 += data.plaintexts[1];
    show(v5);
    ctxt_bit s50 = v5;
    info.context.getEA().rotate(s50, -54);
    show(s50);
    ctxt_bit s51 = v5;
    info.context.getEA().rotate(s51, -37);
    show(s51);
    ctxt_bit s52 = v5;
    info.context.getEA().rotate(s52, -7);
    show(s52);
    ctxt_bit s53 = v5;
    info.context.getEA().rotate(s53, -17);
    show(s53);
    ctxt_bit t15 = blend_bits({{s47, data.masks["001000000000000000000000000000000000000000000000000000100000000000000000000000000"]}, {s45, data.masks["000000000010000000000000000000000000000000000000000000000000000000000000000000000"]}, {s49, data.masks["000000000000001000000000000000000000000000000000000000000000000000000000000000000"]}, {s44, data.masks["000000000000000100000000000010000000000000000000000000000000000000000000000000000"]}, {s46, data.masks["000000000000000000010000000000000000000000000000000000000000000000000000000000000"]}, {s48, data.masks["000000000000000000001000000000000000000000000000000000000000000000000000000000000"]}, {s43, data.masks["000000000000000000000000000000000100000000000000000000000000000000000000000000000"]}});
    ctxt_bit v6 = t15;
    v6.multiplyBy(data.ciphertexts[4]);
    show(v6);
    ctxt_bit s54 = v6;
    info.context.getEA().rotate(s54, -9);
    show(s54);
    ctxt_bit s55 = v6;
    info.context.getEA().rotate(s55, -32);
    show(s55);
    ctxt_bit s56 = v6;
    info.context.getEA().rotate(s56, -41);
    show(s56);
    ctxt_bit s57 = v6;
    info.context.getEA().rotate(s57, -55);
    show(s57);
    ctxt_bit t17 = blend_bits({{s44, data.masks["000000000000000001000000000000000000000000000000000000000000000000000000000000000"]}, {s46, data.masks["000000000000000000000000000001000000000000000000000000000000000000000000000000000"]}, {s43, data.masks["000000000000000000000000000000000000000010000010000000000000000000000000000000000"]}, {s47, data.masks["000000000000000000000000000000000000000000000000100000000000000000000000000000000"]}, {s48, data.masks["000000000000000000000000000000000000000000000000000000000001000000000000000000000"]}});
    ctxt_bit v7 = t17;
    v7 += data.plaintexts[2];
    show(v7);
    ctxt_bit s58 = v7;
    info.context.getEA().rotate(s58, -41);
    show(s58);
    ctxt_bit s59 = v7;
    info.context.getEA().rotate(s59, -55);
    show(s59);
    ctxt_bit t18 = blend_bits({{v7, data.masks["000000000000000000000000000000000000000000000010000000000001000000000000000000000"]}, {s59, data.masks["000000000000000000000000000000000000000000000000000000010000000000000000000000000"]}});
    ctxt_bit t19 = blend_bits({{s57, data.masks["000000000000000000000000000000000000000000000010000000000000000000000000000000000"]}, {s56, data.masks["000000000000000000000000000000000000000000000000000000010001000000000000000000000"]}});
    ctxt_bit v8 = t18;
    v8.multiplyBy(t19);
    show(v8);
    ctxt_bit s60 = v8;
    info.context.getEA().rotate(s60, 8);
    show(s60);
    ctxt_bit s61 = v8;
    info.context.getEA().rotate(s61, -22);
    show(s61);
    ctxt_bit t20 = blend_bits({{v6, data.masks["000000000000000000000000000000000100000000000000000000100000000000000000000000000"]}, {s55, data.masks["000000000000000000000000000000000000000000000000000000000001000000000000000000000"]}});
    ctxt_bit t21 = blend_bits({{s61, data.masks["000000000000000000000000000000000100000000000000000000000000000000000000000000000"]}, {s60, data.masks["000000000000000000000000000000000000000000000000000000100000000000000000000000000"]}, {v8, data.masks["000000000000000000000000000000000000000000000000000000000001000000000000000000000"]}});
    ctxt_bit v9 = t20;
    v9 += t21;
    show(v9);
    ctxt_bit s62 = v9;
    info.context.getEA().rotate(s62, -34);
    show(s62);
    ctxt_bit s63 = v9;
    info.context.getEA().rotate(s63, -61);
    show(s63);
    ctxt_bit s64 = v9;
    info.context.getEA().rotate(s64, -2);
    show(s64);
    ctxt_bit t22 = blend_bits({{s58, data.masks["000000000000000000000000000000000000000000000000000000000100000000000000000000001"]}, {s59, data.masks["000000000000000000000000000000000000000000000000000000000000000000000000001000000"]}});
    ctxt_bit t23 = blend_bits({{s64, data.masks["000000000000000000000000000000000000000000000000000000000100000000000000000000000"]}, {s63, data.masks["000000000000000000000000000000000000000000000000000000000000000000000000001000000"]}, {s62, data.masks["000000000000000000000000000000000000000000000000000000000000000000000000000000001"]}});
    ctxt_bit v10 = t22;
    v10.multiplyBy(t23);
    show(v10);
    ctxt_bit s65 = v10;
    info.context.getEA().rotate(s65, -3);
    show(s65);
    ctxt_bit t24 = blend_bits({{s56, data.masks["000000000000000000000000000000000000000000000000000000100000000000000000000000000"]}, {s54, data.masks["000000000000000000000000000000000000000000000000000000000000000000000000001000000"]}, {s55, data.masks["000000000000000000000000000000000000000000000000000000000000000000000000000001000"]}});
    ctxt_bit t25 = blend_bits({{s65, data.masks["000000000000000000000000000000000000000000000000000000100000000000000000000001000"]}, {v10, data.masks["000000000000000000000000000000000000000000000000000000000000000000000000001000000"]}});
    ctxt_bit v11 = t24;
    v11 += t25;
    show(v11);
    ctxt_bit s66 = v11;
    info.context.getEA().rotate(s66, -14);
    show(s66);
    ctxt_bit s67 = v11;
    info.context.getEA().rotate(s67, 9);
    show(s67);
    ctxt_bit t26 = blend_bits({{s51, data.masks["000001000000000000000000000000000000000000000000000000000000000000000000000000000"]}, {s52, data.masks["000000000000000000000000000000000000000010000000000000000000000000000000000000000"]}, {s50, data.masks["000000000000000000000000000000000000000000000000000000000000100000000000000000000"]}});
    ctxt_bit t27 = blend_bits({{s67, data.masks["000001000000000000000000000000000000000000000000000000000000000000000000000000000"]}, {s66, data.masks["000000000000000000000000000000000000000010000000000000000000100000000000000000000"]}});
    ctxt_bit v12 = t26;
    v12.multiplyBy(t27);
    show(v12);
    ctxt_bit s68 = v12;
    info.context.getEA().rotate(s68, -25);
    show(s68);
    ctxt_bit t28 = blend_bits({{s47, data.masks["000001000000000000000000000000000000000000000000000000000000000000000000000000000"]}, {s49, data.masks["000000000000000000000000000000000001000000000000000000000000000000000000000000000"]}, {s48, data.masks["000000000000000000000000000000000000000010000000000000000000000000000000000000000"]}});
    ctxt_bit t29 = blend_bits({{v12, data.masks["000001000000000000000000000000000000000010000000000000000000000000000000000000000"]}, {s68, data.masks["000000000000000000000000000000000001000000000000000000000000000000000000000000000"]}});
    ctxt_bit v13 = t28;
    v13 += t29;
    show(v13);
    ctxt_bit s69 = v13;
    info.context.getEA().rotate(s69, -79);
    show(s69);
    ctxt_bit t30 = blend_bits({{s51, data.masks["000000010000000000000000000000000000000000000000000000000000000000000000000000000"]}, {s53, data.masks["000000000000000000000000000000000001000000000000000000000000000000000000000000000"]}, {s52, data.masks["000000000000000000000000000000000000000000100000000000000000000000000000000000000"]}});
    ctxt_bit t31 = blend_bits({{s69, data.masks["000000010000000000000000000000000000000000100000000000000000000000000000000000000"]}, {v13, data.masks["000000000000000000000000000000000001000000000000000000000000000000000000000000000"]}});
    ctxt_bit v14 = t30;
    v14.multiplyBy(t31);
    show(v14);
    ctxt_bit s70 = v14;
    info.context.getEA().rotate(s70, -69);
    show(s70);
    ctxt_bit s71 = v14;
    info.context.getEA().rotate(s71, -71);
    show(s71);
    ctxt_bit t32 = blend_bits({{v14, data.masks["000000010000000000000000000000000000000000000000000000000000000000000000000000000"]}, {s70, data.masks["000000000000000000000000000000000000000000000001000000000000000000000000000000000"]}, {s71, data.masks["000000000000000000000000000000000000000000000000000010000000000000000000000000000"]}});
    ctxt_bit v15 = s47;
    v15 += t32;
    show(v15);
    return v15;
}
    