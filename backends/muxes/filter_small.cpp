
#include <helib/FHE.h>

#include "mux-common.hpp"

#ifdef DEBUG
#define show(x) _show(info, x, #x, 80)
#else
#define show(x)
#endif

void _show(EncInfo & info, ctxt_bit vec, std::string name, int size)
{
    std::cout << name << ": ";
    auto decrypted = decrypt_vector(info, vec);
    for (int i = 0; i < size; i++) {
        std::cout << decrypted[i];
    }
    std::cout << "\n";
}

std::vector<std::vector<int>> lanes()
{
    return std::vector<std::vector<int>>{{48, 38}, {36, 29}, {42, 55}};
}

compute_data Prep(EncInfo & info, std::unordered_map<std::string, int> inputs)
{

    compute_data data;
    int pad_count = 1;
    
    ptxt t0{0, inputs["input#2.0"], 0, inputs["input#1.0"], 0, 0, 0, 0, 0, inputs["input#2.1"], inputs["input#1.0"], inputs["input#2.0"], 0, 0, 0, inputs["input#2.1"], 0, inputs["input#1.1"], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, inputs["input#2.1"], 0, 0, inputs["input#2.1"], 0, 0, 0, inputs["input#1.1"], 0, 0, 0, 0, 0, inputs["input#2.1"], 0, 0, 0, 0, 0, 0, 0, 0, 0, inputs["input#1.1"], 0, inputs["input#0.1"], 0, 0, inputs["input#0.1"], inputs["input#2.1"], 0, 0, 0, inputs["input#2.1"], 0, 0, 0, inputs["input#1.1"], 0, 0, inputs["input#2.1"], 0, 0, inputs["input#2.0"], inputs["input#2.0"], 0, 0, 0, inputs["input#0.0"], 0};
    data.ciphertexts.push_back(encrypt_vector(info, t0, pad_count, 1));
    ptxt t1{0, 1, 0, 1, 0, 0, 0, 0, 0, inputs["input#3.1"], 1, 1, 0, 0, 0, inputs["input#3.1"], 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, inputs["input#3.1"], 0, 0, 0, inputs["input#3.1"], 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, inputs["input#3.1"], 0, inputs["input#3.1"], 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, inputs["input#3.1"], 0, 0, 1, 1, 0, 0, 0, 1, 0};
    data.ciphertexts.push_back(encrypt_vector(info, t1, pad_count, 1));
    ptxt t2{0, inputs["input#3.0"], 0, inputs["input#3.0"], inputs["input#3.1"], 0, 0, inputs["input#3.1"], 0, 0, 0, 0, 0, 0, 0, 0, inputs["input#3.0"], 0, 0, 0, 0, inputs["input#3.0"], 0, 0, 0, 0, 0, 0, 0, 0, inputs["input#3.1"], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, inputs["input#3.0"], inputs["input#3.0"], 0, 0, 0, inputs["input#3.1"], 0, 0, 0, 0, 0, 0, 0, 0, inputs["input#3.1"], 0, 0, 0, 0, 0, 0, 0, 0, 0, inputs["input#3.0"], 0, 0, 0, 0, 0, 0, 0, 0, inputs["input#3.1"], 0, inputs["input#3.1"]};
    data.ciphertexts.push_back(encrypt_vector(info, t2, pad_count, 1));
    ptxt t4{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
    data.plaintexts.push_back(encode_vector(info, t4, pad_count, 1));
    ptxt t6{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    data.plaintexts.push_back(encode_vector(info, t6, pad_count, 1));
    ptxt t15{1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1};
    data.plaintexts.push_back(encode_vector(info, t15, pad_count, 1));
    ptxt t17{0, 0, 0, 0, 0, inputs["input#0.1"], 0, inputs["input#0.1"], 0, 0, inputs["input#1.1"], inputs["input#1.0"], 0, 0, 0, 0, 0, 0, 0, 0, inputs["input#0.0"], 0, 0, inputs["input#1.0"], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, inputs["input#0.0"], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, inputs["input#1.1"], 0, 0, 0};
    data.ciphertexts.push_back(encrypt_vector(info, t17, pad_count, 1));
    ptxt t19{0, 0, 0, 0, 0, inputs["input#2.0"], 0, 0, inputs["input#1.0"], inputs["input#0.0"], 0, 0, 0, 0, 0, 0, 0, 0, inputs["input#1.1"], 0, 0, 0, 0, inputs["input#2.1"], 0, 0, 0, 0, inputs["input#2.1"], 0, 0, 0, 0, 0, 0, inputs["input#0.1"], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, inputs["input#2.1"], 0, inputs["input#0.0"], inputs["input#0.1"], 0, 0, 0, inputs["input#1.1"], 0, 0, 0, 0, 0, 0, inputs["input#2.0"], 0, 0, 0, 0, 0, inputs["input#2.0"], 0, 0, inputs["input#2.1"], 0, 0, inputs["input#2.0"], 0, inputs["input#1.0"], 0, 0, 0, 0, 0};
    data.ciphertexts.push_back(encrypt_vector(info, t19, pad_count, 1));
    data.masks["00000000000000000001000001000000000000000000000000000000000000000000000000000000"] = make_mask(info, "00000000000000000001000001000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000001000000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "00000000000000001000000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00010000000000000000000000000010000000000000000000000000000000000000000000000000"] = make_mask(info, "00010000000000000000000000000010000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000100000000000000000100000000000000000000000000000000000000000"] = make_mask(info, "00000000000000000000100000000000000000100000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000001000000000000100000000000000000000000000000000"] = make_mask(info, "00000000000000000000000000000000001000000000000100000000000000000000000000000000", pad_count, 1);
    data.masks["01000000000000000000000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "01000000000000000000000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000000000000000000100000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000000000000000000000000100000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000010000010000000000001000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000010000010000000000001000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000100000000000000000000000000100000000000000000"] = make_mask(info, "00000000000000000000000000000000000100000000000000000000000000100000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000001000000000000000000000000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000001000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000000000000000000000000000001000"] = make_mask(info, "00000000000000000000000000000000000000000000000000000000000000000000000000001000", pad_count, 1);
    data.masks["00000000000000000100000000000000010000000000001000000000000010000000000000000000"] = make_mask(info, "00000000000000000100000000000000010000000000001000000000000010000000000000000000", pad_count, 1);
    data.masks["00001000000000000000000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "00001000000000000000000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000010000000000000000000000000000000000000100000000000000000000000000"] = make_mask(info, "00000000000000010000000000000000000000000000000000000100000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000000010000000000000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000000000000010000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000010000000000000000000000000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000010000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000100000000000000000100000000000000000000000000000000000000000000000000000000"] = make_mask(info, "00000100000000000000000100000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000010000000000000000000000000100000000000000000"] = make_mask(info, "00000000000000000000000000000000000010000000000000000000000000100000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000010000000000000100000000000000000000000000000000000"] = make_mask(info, "00000000000000000000000000000010000000000000100000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000010000000000000000000000000000010000000000000000000000000000"] = make_mask(info, "00000000000000000000010000000000000000000000000000010000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000010000000000000000000000000000010000000000000000000000000"] = make_mask(info, "00000000000000000000000010000000000000000000000000000010000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000100000000000000000000000000000000000000000001000"] = make_mask(info, "00000000000000000000000000000000100000000000000000000000000000000000000000001000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000100000000000000000000000000000000000000000"] = make_mask(info, "00000000000000000000000000000000000000100000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000100000000000000000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000000000100000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000001000000000000000000000000000000000000000001000000000000000000000"] = make_mask(info, "00000000000000001000000000000000000000000000000000000000001000000000000000000000", pad_count, 1);
    data.masks["00001000000000000000000000000000000000000000000000000000000000000000000000000001"] = make_mask(info, "00001000000000000000000000000000000000000000000000000000000000000000000000000001", pad_count, 1);
    data.masks["00000000000000000000000001000000000000000000000000000000000000000000000000000000"] = make_mask(info, "00000000000000000000000001000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000000000000001000000100000000000"] = make_mask(info, "00000000000000000000000000000000000000000000000000000000000001000000100000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000000000000000101000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000000000000000000000101000000000000000", pad_count, 1);
    data.masks["00000000000000000001000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "00000000000000000001000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000100000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "00000000000000000000100000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000001000000000000000000000000000000000000000000000000010100"] = make_mask(info, "00000000000000000000000001000000000000000000000000000000000000000000000000010100", pad_count, 1);
    data.masks["10000000000000000000000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "10000000000000000000000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000100000000000000000000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000000100000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000000000000100000000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000000000000000000100000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000010000000000000000000000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000010000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000000000000000000000000100101000"] = make_mask(info, "00000000000000000000000000000000000000000000000000000000000000000000000100101000", pad_count, 1);
    data.masks["00000000000000000000000000000010000000000001000000000000000000000000000000000000"] = make_mask(info, "00000000000000000000000000000010000000000001000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000100000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "00000000000000000100000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000001000000000000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "00000000001000000000000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["10000000000000100000000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "10000000000000100000000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000001000000000000000000000000000000000000000000000000000"] = make_mask(info, "00000000000000000000000000001000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000001000000000000000000000000000000000000000"] = make_mask(info, "00000000000000000000000000000000000000001000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000010000000000000000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "00000010000000000000000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000000000000010000000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000000000000000000010000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000001000000000000000000010000000000"] = make_mask(info, "00000000000000000000000000000000000000000000000001000000000000000000010000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000010000000000000000000000000000000000001000001"] = make_mask(info, "00000000000000000000000000000000000010000000000000000000000000000000000001000001", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000000000000001000000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000000000000000000001000000000000000000", pad_count, 1);
    data.masks["00000000000000000000100000000000000000000000000000000000000000000010000000000000"] = make_mask(info, "00000000000000000000100000000000000000000000000000000000000000000010000000000000", pad_count, 1);
    data.masks["00000000000000000001000000000000000100000000000000000000000000000000000000000000"] = make_mask(info, "00000000000000000001000000000000000100000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000100000000000000000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "00000100000000000000000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000001000000000000010000000000000000010000000000000"] = make_mask(info, "00000000000000000000000000000000001000000000000010000000000000000010000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000000000000000000010000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000000000000000000000000010000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000100000000000010000000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000000100000000000010000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000110000000000000000000000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000110000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000101000000000000000000000000000001000000000000000000000"] = make_mask(info, "00000000000000000000000000101000000000000000000000000000001000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000010000000000001000000000000010000000000000000000"] = make_mask(info, "00000000000000000000000000000000010000000000001000000000000010000000000000000000", pad_count, 1);
    data.masks["00000000000010000001000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "00000000000010000001000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000100000000000000000000000000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000100000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000001001000000001000000000000000000000000000000000000000000000000"] = make_mask(info, "00000000000000000001001000000001000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000000000000000010000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000000000000000000000010000000000000000", pad_count, 1);
    data.masks["00000000000000000000010001000000000000000000000000000000000000000000000000000100"] = make_mask(info, "00000000000000000000010001000000000000000000000000000000000000000000000000000100", pad_count, 1);
    data.masks["00000000000000000010000000000000000000000000000000000000000000000000000011000000"] = make_mask(info, "00000000000000000010000000000000000000000000000000000000000000000000000011000000", pad_count, 1);
    data.masks["00000000000000000000100000000000000000000100000000000000000000000000000000000000"] = make_mask(info, "00000000000000000000100000000000000000000100000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000101010000000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "00000000000101010000000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000010000000100000000000000000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000010000000100000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000100000000000000000000000000000000000000000000000000000"] = make_mask(info, "00000000000000000000000000100000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000001000000000000100000000000001000000000000000000000"] = make_mask(info, "00000000000000000000000000000001000000000000100000000000001000000000000000000000", pad_count, 1);
    data.masks["00000000000000000001000010000000000000000000000000000000000000000000000000000000"] = make_mask(info, "00000000000000000001000010000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000000000001000000000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000000000000000001000000000000000000000", pad_count, 1);
    data.masks["00000000000000000010000000000000000000000000000000000000100000000000000000000000"] = make_mask(info, "00000000000000000010000000000000000000000000000000000000100000000000000000000000", pad_count, 1);
    data.masks["00000001000000000000000000000000000000000000000001000000000000000000100000000000"] = make_mask(info, "00000001000000000000000000000000000000000000000001000000000000000000100000000000", pad_count, 1);
    data.masks["00000000000000000000010000000000000000000000000000000000000000000000000000000100"] = make_mask(info, "00000000000000000000010000000000000000000000000000000000000000000000000000000100", pad_count, 1);
    data.masks["00000000000000000000000000010000000000001000000000000000000000000000000000000000"] = make_mask(info, "00000000000000000000000000010000000000001000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000010000000000000000000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000000010000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000010000001000000100000000000000000000000000000000000000000000"] = make_mask(info, "00000000000000000000010000001000000100000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000001000000000000000000000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000001000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000010000000000000000000000000000000000000000000000000"] = make_mask(info, "00000000000000000000000000000010000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000100000000000000000000000000000100000000"] = make_mask(info, "00000000000000000000000000000000000000000100000000000000000000000000000100000000", pad_count, 1);
    data.masks["00000000000100000000000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "00000000000100000000000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000100000000000000000000000000000000000000000000000000000000"] = make_mask(info, "00000000000000000000000100000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["01000000000000000000000000000000000000000000100000000000000000000000000000000000"] = make_mask(info, "01000000000000000000000000000000000000000000100000000000000000000000000000000000", pad_count, 1);
    data.masks["00000011000000000000000000000000001001000001000000000010000001000000000000000000"] = make_mask(info, "00000011000000000000000000000000001001000001000000000010000001000000000000000000", pad_count, 1);
    data.masks["00000000010000000000000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "00000000010000000000000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000000000010000000000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000000000000000010000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000010000000000000000000000000000000000000000000000"] = make_mask(info, "00000000000000000000000000000000010000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000000000000000001000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000000000000000000000001000000000000000", pad_count, 1);
    data.masks["00000000000000100000000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "00000000000000100000000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000010000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "00000000000000000000010000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000001000000100000000000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000000001000000100000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000000000000000000000010000000000"] = make_mask(info, "00000000000000000000000000000000000000000000000000000000000000000000010000000000", pad_count, 1);
    data.masks["00000001000000000000000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "00000001000000000000000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000100000000000000000001000000000000000000000000000000000000000000000000000"] = make_mask(info, "00000000100000000000000000001000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000010000001000001000000000000000000000000000"] = make_mask(info, "00000000000000000000000000000000000000010000001000001000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000010001000000000000000000000000000000000000000000000000"] = make_mask(info, "00000000000000000000000000010001000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000000000000000100000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000000000000000000000100000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000100000000000001000000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000000100000000000001000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000001000000000000000000000000000000000001000000000000"] = make_mask(info, "00000000000000000000000000000001000000000000000000000000000000000001000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000000001000010000000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000000000000001000010000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000010000000000000100000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000000000010000000000000100000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000001000000000000000000000000000000000000000000000000"] = make_mask(info, "00000000000000000000000000000001000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000000000000000000000000100000000"] = make_mask(info, "00000000000000000000000000000000000000000000000000000000000000000000000100000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000100001000000000000000000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000100001000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000001001000000000000000000000000000000000000"] = make_mask(info, "00000000000000000000000000000000000000001001000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000010000000000000100000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "00000010000000000000100000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000001000000000000000000000000010000000000000000000000000000000"] = make_mask(info, "00000000000000000000001000000000000000000000000010000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000100000000000000000000000000000000000000000000"] = make_mask(info, "00000000000000000000000000000000000100000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000010000000000000000001000000001010000000000000000000000000"] = make_mask(info, "00000000000000000000000010000000000000000001000000001010000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000010000001000000000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000000000010000001000000000000000000000", pad_count, 1);
    data.masks["00000000000101000001001000000000000010000001000001000000000000000000000000000000"] = make_mask(info, "00000000000101000001001000000000000010000001000001000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000010000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "00000000000000000010000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000010000000000000000000000000000000000000000000000000000"] = make_mask(info, "00000000000000000000000000010000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000100001000000000000000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000000100001000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000000000001000000100000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000000000000000001000000100000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000000000000000000000000000100000"] = make_mask(info, "00000000000000000000000000000000000000000000000000000000000000000000000000100000", pad_count, 1);
    data.masks["00000000000000000100000000101000000000000000010000000000000000000000000000000000"] = make_mask(info, "00000000000000000100000000101000000000000000010000000000000000000000000000000000", pad_count, 1);
    data.masks["10000000000000010000000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "10000000000000010000000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000100000000000000000000000000000000000000000000000000000000000000000000000"] = make_mask(info, "00000000100000000000000000000000000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000000001000000000000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000000000000001000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000000000000100001000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000000000000000000100001000000000000000", pad_count, 1);
    data.masks["00000000000000000000000100000000000001000000000000000000000000000000000000000000"] = make_mask(info, "00000000000000000000000100000000000001000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000000100000000000000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000000000000100000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000001000000000000000000000000000000000000000000000"] = make_mask(info, "00000000000000000000000000000000001000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000100000000000000000000000000000000000000000001000000000"] = make_mask(info, "00000000000000000000000000100000000000000000000000000000000000000000001000000000", pad_count, 1);
    data.masks["00000000000000000100000000000001000000000000100000000000000000000000000000000000"] = make_mask(info, "00000000000000000100000000000001000000000000100000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000100000000000000000000000000000000000000000000000000"] = make_mask(info, "00000000000000000000000000000100000000000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000100000000000000000000000000000000000100000000000000000000000"] = make_mask(info, "00000000000000000000100000000000000000000000000000000000100000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000001000000000000000000000000000000001000000000000000000"] = make_mask(info, "00000000000000000000000000001000000000000000000000000000000001000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000010000000000000000000000000000100000010100000000000000000"] = make_mask(info, "00000000000000000000000010000000000000000000000000000100000010100000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000000000000000000000000010000100"] = make_mask(info, "00000000000000000000000000000000000000000000000000000000000000000000000010000100", pad_count, 1);
    data.masks["00000000000000000000000000000000000010000000000000000000000000000000000000000000"] = make_mask(info, "00000000000000000000000000000000000010000000000000000000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000001000000000000000000000010000000000000000000000"] = make_mask(info, "00000000000000000000000000000000001000000000000000000000010000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000100000000000000000000000000000000000010000000000000000000"] = make_mask(info, "00000000000000000000000100000000000000000000000000000000000010000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000010000000000000000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000000000010000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000010011000000000000010000100000000000000000001000000000000000000000"] = make_mask(info, "00000000000000010011000000000000010000100000000000000000001000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000000000000000000000010010000000"] = make_mask(info, "00000000000000000000000000000000000000000000000000000000000000000000010010000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000001000000000000000000000000000"] = make_mask(info, "00000000000000000000000000000000000000000000000000001000000000000000000000000000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000000000000000000000000000010000"] = make_mask(info, "00000000000000000000000000000000000000000000000000000000000000000000000000010000", pad_count, 1);
    data.masks["00000000000000000000000000000000000000000000000000000000000000000000000100001000"] = make_mask(info, "00000000000000000000000000000000000000000000000000000000000000000000000100001000", pad_count, 1);
    data.masks["00000000000000000000000000000000000001000000000000000000000000000000000000000000"] = make_mask(info, "00000000000000000000000000000000000001000000000000000000000000000000000000000000", pad_count, 1);
    return data;
}

std::vector<ctxt_bit> Compute(EncInfo & info, compute_data data)
{
    ctxt_bit v0 = data.ciphertexts[0];
    v0 += data.ciphertexts[1];
    show(v0);
    ctxt_bit s0 = v0;
    info.context.getEA().rotate(s0, 15);
    show(s0);
    ctxt_bit s1 = v0;
    info.context.getEA().rotate(s1, 10);
    show(s1);
    ctxt_bit s2 = v0;
    info.context.getEA().rotate(s2, -9);
    show(s2);
    ctxt_bit s3 = v0;
    info.context.getEA().rotate(s3, -10);
    show(s3);
    ctxt_bit s4 = v0;
    info.context.getEA().rotate(s4, 21);
    show(s4);
    ctxt_bit s5 = v0;
    info.context.getEA().rotate(s5, -29);
    show(s5);
    ctxt_bit t3 = blend_bits({{s2, data.masks["01000000000000000000000000000000000000000000000000000000000000000000000000000000"]}, {v0, data.masks["00010000000000000000000000000010000000000000000000000000000000000000000000000000"]}, {s4, data.masks["00001000000000000000000000000000000000000000000000000000000000000000000000000001"]}, {s3, data.masks["00000001000000000000000000000000000000000000000001000000000000000000100000000000"]}, {s0, data.masks["00000000000000001000000000000000000000000000000000000000001000000000000000000000"]}, {s1, data.masks["00000000000000000000010000000000000000000000000000000000000000000000000000000100"]}, {s5, data.masks["00000000000000000000000000000000000000000000110000000000000000000000000000000000"]}});
    ctxt_bit v1 = data.ciphertexts[2];
    v1.multiplyBy(t3);
    show(v1);
    ctxt_bit s6 = v1;
    info.context.getEA().rotate(s6, 14);
    show(s6);
    ctxt_bit s7 = v1;
    info.context.getEA().rotate(s7, -3);
    show(s7);
    ctxt_bit s8 = v1;
    info.context.getEA().rotate(s8, 15);
    show(s8);
    ctxt_bit s9 = v1;
    info.context.getEA().rotate(s9, -43);
    show(s9);
    ctxt_bit s10 = v1;
    info.context.getEA().rotate(s10, 6);
    show(s10);
    ctxt_bit s11 = v1;
    info.context.getEA().rotate(s11, -15);
    show(s11);
    ctxt_bit s12 = v1;
    info.context.getEA().rotate(s12, -28);
    show(s12);
    ctxt_bit t5 = blend_bits({{s1, data.masks["00000000000000000001000001000000000000000000000000000000000000000000000000000000"]}, {s2, data.masks["00000000000000000000000000001000000000000000000000000000000001000000000000000000"]}, {v0, data.masks["00000000000000000000000000000000010000000000000000000000000000000000000000000000"]}, {s3, data.masks["00000000000000000000000000000000000000000001000000000000000000000000000000000000"]}, {s4, data.masks["00000000000000000000000000000000000000000000000000000000000000000000000000001000"]}});
    ctxt_bit v2 = t5;
    v2 += data.plaintexts[0];
    show(v2);
    ctxt_bit s13 = v2;
    info.context.getEA().rotate(s13, 11);
    show(s13);
    ctxt_bit s14 = v2;
    info.context.getEA().rotate(s14, 6);
    show(s14);
    ctxt_bit s15 = v2;
    info.context.getEA().rotate(s15, -28);
    show(s15);
    ctxt_bit s16 = v2;
    info.context.getEA().rotate(s16, -3);
    show(s16);
    ctxt_bit s17 = v2;
    info.context.getEA().rotate(s17, -36);
    show(s17);
    ctxt_bit t7 = blend_bits({{s15, data.masks["10000000000000010000000000000000000000000000000000000000000000000000000000000000"]}, {s13, data.masks["00000000000000000000000000000010000000000000100000000000000000000000000000000000"]}, {s14, data.masks["00000000000000000000000000000001000000000000000000000000000000000000000000000000"]}, {s17, data.masks["00000000000000000000000000000000000000001000000000000000000000000000000000000000"]}, {s16, data.masks["00000000000000000000000000000000000000000000000000000000001000000000000000000000"]}, {??, data.masks["00000000000101000001001000000000000010000001000001000000000000000000000000000000"]}});
    ctxt_bit t8 = blend_bits({{s7, data.masks["10000000000000000000000000000000000000000000000000000000000000000000000000000000"]}, {s6, data.masks["00000000000101010000000000000000000000000000000000000000000000000000000000000000"]}, {s8, data.masks["00000000000000000001001000000001000000000000000000000000000000000000000000000000"]}, {s11, data.masks["00000000000000000000000000000010000000000001000000000000000000000000000000000000"]}, {s10, data.masks["00000000000000000000000000000000000010000000000000000000000000000000000000000000"]}, {s12, data.masks["00000000000000000000000000000000000000001000000000000000000000000000000000000000"]}, {v1, data.masks["00000000000000000000000000000000000000000000100001000000000000000000000000000000"]}, {s9, data.masks["00000000000000000000000000000000000000000000000000000000001000000000000000000000"]}});
    ctxt_bit v3 = t7;
    v3.multiplyBy(t8);
    show(v3);
    ctxt_bit s18 = v3;
    info.context.getEA().rotate(s18, -54);
    show(s18);
    ctxt_bit s19 = v3;
    info.context.getEA().rotate(s19, -29);
    show(s19);
    ctxt_bit s20 = v3;
    info.context.getEA().rotate(s20, -65);
    show(s20);
    ctxt_bit s21 = v3;
    info.context.getEA().rotate(s21, 2);
    show(s21);
    ctxt_bit s22 = v3;
    info.context.getEA().rotate(s22, -45);
    show(s22);
    ctxt_bit s23 = v3;
    info.context.getEA().rotate(s23, -5);
    show(s23);
    ctxt_bit s24 = v3;
    info.context.getEA().rotate(s24, -58);
    show(s24);
    ctxt_bit s25 = v3;
    info.context.getEA().rotate(s25, -12);
    show(s25);
    ctxt_bit t9 = blend_bits({{s21, data.masks["00000000000000000100000000000000000000000000000000000000000000000000000000000000"]}, {s18, data.masks["00000000000000000000000000100000000000000000000000000000000000000000000000000000"]}, {s25, data.masks["00000000000000000000000000001000000000000000000000000000000000000000000000000000"]}, {v3, data.masks["00000000000000000000000000000001000000000000100000000000001000000000000000000000"]}, {s20, data.masks["00000000000000000000000000000000000000000000010000000000000000000000000000000000"]}});
    ctxt_bit t10 = blend_bits({{s23, data.masks["00000000000000000100000000000001000000000000100000000000000000000000000000000000"]}, {s20, data.masks["00000000000000000000000000101000000000000000000000000000001000000000000000000000"]}, {s18, data.masks["00000000000000000000000000000000000000000000010000000000000000000000000000000000"]}});
    ctxt_bit v4 = t9;
    v4.multiplyBy(t10);
    show(v4);
    ctxt_bit s26 = v4;
    info.context.getEA().rotate(s26, -78);
    show(s26);
    ctxt_bit t11 = blend_bits({{v4, data.masks["00000000000000000100000000101000000000000000010000000000000000000000000000000000"]}, {s26, data.masks["00000000000000000000000000000000010000000000001000000000000010000000000000000000"]}});
    ctxt_bit t12 = blend_bits({{s21, data.masks["00000000000000000100000000000000010000000000001000000000000010000000000000000000"]}, {s18, data.masks["00000000000000000000000000100000000000000000000000000000000000000000000000000000"]}, {s25, data.masks["00000000000000000000000000001000000000000000000000000000000000000000000000000000"]}, {s20, data.masks["00000000000000000000000000000000000000000000010000000000000000000000000000000000"]}});
    ctxt_bit v5 = t11;
    v5 += t12;
    show(v5);
    ctxt_bit s27 = v5;
    info.context.getEA().rotate(s27, -40);
    show(s27);
    ctxt_bit s28 = v5;
    info.context.getEA().rotate(s28, -44);
    show(s28);
    ctxt_bit s29 = v5;
    info.context.getEA().rotate(s29, -55);
    show(s29);
    ctxt_bit s30 = v5;
    info.context.getEA().rotate(s30, -24);
    show(s30);
    ctxt_bit s31 = v5;
    info.context.getEA().rotate(s31, -75);
    show(s31);
    ctxt_bit t13 = blend_bits({{s30, data.masks["00000000000000000000010000000000000000000000000000000000000000000000000000000000"]}, {s31, data.masks["00000000000000000000000000000000000000000000000000010000000000000100000000000000"]}, {s27, data.masks["00000000000000000000000000000000000000000000000000000000010000000000000000000000"]}, {s29, data.masks["00000000000000000000000000000000000000000000000000000000001000000000000000000000"]}, {s28, data.masks["00000000000000000000000000000000000000000000000000000000000000101000000000000000"]}});
    ctxt_bit t14 = blend_bits({{s21, data.masks["00000000000000000000010000000000000000000000000000010000000000000000000000000000"]}, {s22, data.masks["00000000000000000000000000000000000000000000000000000000010000000000000000000000"]}, {s24, data.masks["00000000000000000000000000000000000000000000000000000000001000000100000000000000"]}, {s19, data.masks["00000000000000000000000000000000000000000000000000000000000000101000000000000000"]}});
    ctxt_bit v6 = t13;
    v6 += t14;
    show(v6);
    ctxt_bit s32 = v6;
    info.context.getEA().rotate(s32, -78);
    show(s32);
    ctxt_bit s33 = v6;
    info.context.getEA().rotate(s33, -77);
    show(s33);
    ctxt_bit s34 = v6;
    info.context.getEA().rotate(s34, -76);
    show(s34);
    ctxt_bit s35 = v6;
    info.context.getEA().rotate(s35, -75);
    show(s35);
    ctxt_bit s36 = v6;
    info.context.getEA().rotate(s36, -11);
    show(s36);
    ctxt_bit s37 = v6;
    info.context.getEA().rotate(s37, -39);
    show(s37);
    ctxt_bit s38 = v6;
    info.context.getEA().rotate(s38, -70);
    show(s38);
    ctxt_bit s39 = v6;
    info.context.getEA().rotate(s39, -5);
    show(s39);
    ctxt_bit s40 = v6;
    info.context.getEA().rotate(s40, -69);
    show(s40);
    ctxt_bit s41 = v6;
    info.context.getEA().rotate(s41, -3);
    show(s41);
    ctxt_bit s42 = v6;
    info.context.getEA().rotate(s42, -65);
    show(s42);
    ctxt_bit s43 = v6;
    info.context.getEA().rotate(s43, -20);
    show(s43);
    ctxt_bit s44 = v6;
    info.context.getEA().rotate(s44, -45);
    show(s44);
    ctxt_bit s45 = v6;
    info.context.getEA().rotate(s45, -12);
    show(s45);
    ctxt_bit s46 = v6;
    info.context.getEA().rotate(s46, -2);
    show(s46);
    ctxt_bit s47 = v6;
    info.context.getEA().rotate(s47, -30);
    show(s47);
    ctxt_bit s48 = v6;
    info.context.getEA().rotate(s48, -22);
    show(s48);
    ctxt_bit s49 = v6;
    info.context.getEA().rotate(s49, -51);
    show(s49);
    ctxt_bit s50 = v6;
    info.context.getEA().rotate(s50, -17);
    show(s50);
    ctxt_bit s51 = v6;
    info.context.getEA().rotate(s51, -16);
    show(s51);
    ctxt_bit s52 = v6;
    info.context.getEA().rotate(s52, -15);
    show(s52);
    ctxt_bit s53 = v6;
    info.context.getEA().rotate(s53, -73);
    show(s53);
    ctxt_bit s54 = v6;
    info.context.getEA().rotate(s54, -28);
    show(s54);
    ctxt_bit s55 = v6;
    info.context.getEA().rotate(s55, -71);
    show(s55);
    ctxt_bit s56 = v6;
    info.context.getEA().rotate(s56, -54);
    show(s56);
    ctxt_bit s57 = v6;
    info.context.getEA().rotate(s57, -60);
    show(s57);
    ctxt_bit t16 = blend_bits({{s49, data.masks["10000000000000100000000000000000000000000000000000000000000000000000000000000000"]}, {s43, data.masks["01000000000000000000000000000000000000000000100000000000000000000000000000000000"]}, {s57, data.masks["00001000000000000000000000000000000000000000000000000000000000000000000000000000"]}, {s56, data.masks["00000000100000000000000000000000000000000000000000000000000000000000000000000000"]}, {s44, data.masks["00000000000010000001000000000000000000000000000000000000000000000000000000000000"]}, {s39, data.masks["00000000000000001000000000000000000000000000000000000000000000000000000000000000"]}, {s41, data.masks["00000000000000000010000000000000000000000000000000000000000000000000000000000000"]}, {s47, data.masks["00000000000000000000010000001000000100000000000000000000000000000000000000000000"]}, {s35, data.masks["00000000000000000000000000100000000000000000000000000000000000000000001000000000"]}, {s54, data.masks["00000000000000000000000000000010000000000000000000000000000000000000000000000000"]}, {s38, data.masks["00000000000000000000000000000001000000000000000000000000000000000001000000000000"]}, {s50, data.masks["00000000000000000000000000000000001000000000000000000000000000000000000000000000"]}, {s42, data.masks["00000000000000000000000000000000000010000000000000000000000000000000000001000001"]}, {s45, data.masks["00000000000000000000000000000000000000010000001000001000000000000000000000000000"]}, {s48, data.masks["00000000000000000000000000000000000000001001000000000000000000000000000000000000"]}, {s51, data.masks["00000000000000000000000000000000000000000100000000000000000000000000000000000000"]}, {s52, data.masks["00000000000000000000000000000000000000000010000000100000000000000000000000000000"]}, {s36, data.masks["00000000000000000000000000000000000000000000000100000000000000000000000000000000"]}, {s46, data.masks["00000000000000000000000000000000000000000000000001000000100000000000000000000000"]}, {s34, data.masks["00000000000000000000000000000000000000000000000000000001000000000000000000000000"]}, {v6, data.masks["00000000000000000000000000000000000000000000000000000000010000000000000000000000"]}, {s32, data.masks["00000000000000000000000000000000000000000000000000000000000100001000000000000000"]}, {s33, data.masks["00000000000000000000000000000000000000000000000000000000000000000100000000000000"]}, {s53, data.masks["00000000000000000000000000000000000000000000000000000000000000000000010010000000"]}, {s55, data.masks["00000000000000000000000000000000000000000000000000000000000000000000000100000000"]}, {s40, data.masks["00000000000000000000000000000000000000000000000000000000000000000000000000010000"]}});
    ctxt_bit v7 = t16;
    v7 += data.plaintexts[2];
    show(v7);
    ctxt_bit s58 = v7;
    info.context.getEA().rotate(s58, -9);
    show(s58);
    ctxt_bit s59 = v7;
    info.context.getEA().rotate(s59, -15);
    show(s59);
    ctxt_bit s60 = v7;
    info.context.getEA().rotate(s60, -48);
    show(s60);
    ctxt_bit s61 = v7;
    info.context.getEA().rotate(s61, -67);
    show(s61);
    ctxt_bit s62 = v7;
    info.context.getEA().rotate(s62, -5);
    show(s62);
    ctxt_bit s63 = v7;
    info.context.getEA().rotate(s63, -8);
    show(s63);
    ctxt_bit s64 = v7;
    info.context.getEA().rotate(s64, -76);
    show(s64);
    ctxt_bit s65 = v7;
    info.context.getEA().rotate(s65, 1);
    show(s65);
    ctxt_bit s66 = v7;
    info.context.getEA().rotate(s66, -7);
    show(s66);
    ctxt_bit s67 = v7;
    info.context.getEA().rotate(s67, -23);
    show(s67);
    ctxt_bit s68 = v7;
    info.context.getEA().rotate(s68, -3);
    show(s68);
    ctxt_bit s69 = v7;
    info.context.getEA().rotate(s69, -59);
    show(s69);
    ctxt_bit s70 = v7;
    info.context.getEA().rotate(s70, -66);
    show(s70);
    ctxt_bit s71 = v7;
    info.context.getEA().rotate(s71, -21);
    show(s71);
    ctxt_bit s72 = v7;
    info.context.getEA().rotate(s72, -49);
    show(s72);
    ctxt_bit s73 = v7;
    info.context.getEA().rotate(s73, -4);
    show(s73);
    ctxt_bit s74 = v7;
    info.context.getEA().rotate(s74, -17);
    show(s74);
    ctxt_bit s75 = v7;
    info.context.getEA().rotate(s75, -30);
    show(s75);
    ctxt_bit s76 = v7;
    info.context.getEA().rotate(s76, -1);
    show(s76);
    ctxt_bit t18 = blend_bits({{s57, data.masks["00000100000000000000000000000000000000000000000000000000000000000000000000000000"]}, {s44, data.masks["00000010000000000000100000000000000000000000000000000000000000000000000000000000"]}, {s49, data.masks["00000001000000000000000000000000000000000000000000000000000000000000000000000000"]}, {s36, data.masks["00000000001000000000000000000000000000000000000000000000000000000000000000000000"]}, {s56, data.masks["00000000000100000000000000000000000000000000000000000000000000000000000000000000"]}, {s32, data.masks["00000000000000000000000100000000000000000000000000000000000010000000000000000000"]}, {s33, data.masks["00000000000000000000000010000000000000000000000000000010000000000000000000000000"]}, {s34, data.masks["00000000000000000000000001000000000000000000000000000000000000000000000000000000"]}, {s48, data.masks["00000000000000000000000000000100000000000000000000000000000000000000000000000000"]}, {s40, data.masks["00000000000000000000000000000000100000000000000000000000000000000000000000001000"]}, {s54, data.masks["00000000000000000000000000000000000001000000000000000000000000000000000000000000"]}, {s43, data.masks["00000000000000000000000000000000000000100000000000000000000000000000000000000000"]}, {s41, data.masks["00000000000000000000000000000000000000000000000010000000000000000000000000000000"]}, {v6, data.masks["00000000000000000000000000000000000000000000000000010000001000000000000000000000"]}, {s45, data.masks["00000000000000000000000000000000000000000000000000000100000000000000000000000000"]}, {s38, data.masks["00000000000000000000000000000000000000000000000000000000000001000000100000000000"]}, {s37, data.masks["00000000000000000000000000000000000000000000000000000000000000100000000000000000"]}, {s35, data.masks["00000000000000000000000000000000000000000000000000000000000000010000000000000000"]}});
    ctxt_bit v8 = t18;
    v8.multiplyBy(data.ciphertexts[3]);
    show(v8);
    ctxt_bit s77 = v8;
    info.context.getEA().rotate(s77, -48);
    show(s77);
    ctxt_bit s78 = v8;
    info.context.getEA().rotate(s78, -15);
    show(s78);
    ctxt_bit s79 = v8;
    info.context.getEA().rotate(s79, -67);
    show(s79);
    ctxt_bit s80 = v8;
    info.context.getEA().rotate(s80, -4);
    show(s80);
    ctxt_bit s81 = v8;
    info.context.getEA().rotate(s81, -1);
    show(s81);
    ctxt_bit s82 = v8;
    info.context.getEA().rotate(s82, -5);
    show(s82);
    ctxt_bit s83 = v8;
    info.context.getEA().rotate(s83, -17);
    show(s83);
    ctxt_bit s84 = v8;
    info.context.getEA().rotate(s84, -49);
    show(s84);
    ctxt_bit s85 = v8;
    info.context.getEA().rotate(s85, -8);
    show(s85);
    ctxt_bit s86 = v8;
    info.context.getEA().rotate(s86, -3);
    show(s86);
    ctxt_bit s87 = v8;
    info.context.getEA().rotate(s87, -23);
    show(s87);
    ctxt_bit s88 = v8;
    info.context.getEA().rotate(s88, -66);
    show(s88);
    ctxt_bit s89 = v8;
    info.context.getEA().rotate(s89, -59);
    show(s89);
    ctxt_bit s90 = v8;
    info.context.getEA().rotate(s90, -7);
    show(s90);
    ctxt_bit s91 = v8;
    info.context.getEA().rotate(s91, -30);
    show(s91);
    ctxt_bit t20 = blend_bits({{s67, data.masks["00000100000000000000000100000000000000000000000000000000000000000000000000000000"]}, {s63, data.masks["00000000100000000000000000001000000000000000000000000000000000000000000000000000"]}, {s62, data.masks["00000000010000000000000000000000000000000000000000000000000000000000000000000000"]}, {v7, data.masks["00000000000000000010000000000000000000000000000000000000000000000000000011000000"]}, {s66, data.masks["00000000000000000001000010000000000000000000000000000000000000000000000000000000"]}, {s65, data.masks["00000000000000000000001000000000000000000000000010000000000000000000000000000000"]}, {s68, data.masks["00000000000000000000000000010000000000000000000000000000000000000000000000000000"]}, {s71, data.masks["00000000000000000000000000000000000100000000000000000000000000000000000000000000"]}, {s73, data.masks["00000000000000000000000000000000000000000000001000000000000000000000000000000000"]}, {s70, data.masks["00000000000000000000000000000000000000000000000001000000000000000000010000000000"]}, {s74, data.masks["00000000000000000000000000000000000000000000000000000100000000000000000000000000"]}, {s69, data.masks["00000000000000000000000000000000000000000000000000000001000010000000000000000000"]}, {s61, data.masks["00000000000000000000000000000000000000000000000000000000000000100000000000000000"]}, {s59, data.masks["00000000000000000000000000000000000000000000000000000000000000000010000000000000"]}, {s58, data.masks["00000000000000000000000000000000000000000000000000000000000000000000000100000000"]}, {s72, data.masks["00000000000000000000000000000000000000000000000000000000000000000000000000100000"]}});
    ctxt_bit v9 = t20;
    v9.multiplyBy(data.ciphertexts[4]);
    show(v9);
    ctxt_bit s92 = v9;
    info.context.getEA().rotate(s92, -70);
    show(s92);
    ctxt_bit s93 = v9;
    info.context.getEA().rotate(s93, -12);
    show(s93);
    ctxt_bit s94 = v9;
    info.context.getEA().rotate(s94, -55);
    show(s94);
    ctxt_bit s95 = v9;
    info.context.getEA().rotate(s95, -15);
    show(s95);
    ctxt_bit s96 = v9;
    info.context.getEA().rotate(s96, -78);
    show(s96);
    ctxt_bit t21 = blend_bits({{s80, data.masks["00000010000000000000000000000000000000000000000000000000000000000000000000000000"]}, {s83, data.masks["00000001000000000000000000000000000000000000000000000000000000000000000000000000"]}, {s87, data.masks["00000000000000010000000000000000000000000000000000000100000000000000000000000000"]}, {s82, data.masks["00000000000000000010000000000000000000000000000000000000100000000000000000000000"]}, {s81, data.masks["00000000000000000001000000000000000000000000000000000000000000000000000000000000"]}, {s79, data.masks["00000000000000000000100000000000000000100000000000000000000000000000000000000000"]}, {s85, data.masks["00000000000000000000000010000000000000000001000000001010000000000000000000000000"]}, {s91, data.masks["00000000000000000000000000000000010000000000000000000000000000000000000000000000"]}, {s86, data.masks["00000000000000000000000000000000001000000000000000000000000000000000000000000000"]}, {s77, data.masks["00000000000000000000000000000000000001000000000000000000000000000000000000000000"]}, {s90, data.masks["00000000000000000000000000000000000000000000000100000000000001000000000000000000"]}, {v8, data.masks["00000000000000000000000000000000000000000000000000000000001000000000000000000000"]}, {s84, data.masks["00000000000000000000000000000000000000000000000000000000000010000000000000000000"]}, {s88, data.masks["00000000000000000000000000000000000000000000000000000000000000100000000000000000"]}, {s78, data.masks["00000000000000000000000000000000000000000000000000000000000000000000000100001000"]}, {s89, data.masks["00000000000000000000000000000000000000000000000000000000000000000000000000100000"]}});
    ctxt_bit t22 = blend_bits({{s93, data.masks["00000011000000000000000000000000001001000001000000000010000001000000000000000000"]}, {s92, data.masks["00000000000000010011000000000000010000100000000000000000001000000000000000000000"]}, {s95, data.masks["00000000000000000000100000000000000000000000000000000000100000000000000000000000"]}, {v9, data.masks["00000000000000000000000010000000000000000000000000000100000010100000000000000000"]}, {s94, data.masks["00000000000000000000000000000000000000000000000100001000000000000000000000000000"]}, {s96, data.masks["00000000000000000000000000000000000000000000000000000000000000000000000100101000"]}});
    ctxt_bit v10 = t21;
    v10 += t22;
    show(v10);
    ctxt_bit s97 = v10;
    info.context.getEA().rotate(s97, -36);
    show(s97);
    ctxt_bit s98 = v10;
    info.context.getEA().rotate(s98, -67);
    show(s98);
    ctxt_bit s99 = v10;
    info.context.getEA().rotate(s99, -64);
    show(s99);
    ctxt_bit s100 = v10;
    info.context.getEA().rotate(s100, -42);
    show(s100);
    ctxt_bit s101 = v10;
    info.context.getEA().rotate(s101, -53);
    show(s101);
    ctxt_bit s102 = v10;
    info.context.getEA().rotate(s102, -79);
    show(s102);
    ctxt_bit s103 = v10;
    info.context.getEA().rotate(s103, -16);
    show(s103);
    ctxt_bit s104 = v10;
    info.context.getEA().rotate(s104, -11);
    show(s104);
    ctxt_bit s105 = v10;
    info.context.getEA().rotate(s105, -75);
    show(s105);
    ctxt_bit s106 = v10;
    info.context.getEA().rotate(s106, -7);
    show(s106);
    ctxt_bit s107 = v10;
    info.context.getEA().rotate(s107, -76);
    show(s107);
    ctxt_bit s108 = v10;
    info.context.getEA().rotate(s108, -19);
    show(s108);
    ctxt_bit t23 = blend_bits({{s47, data.masks["00000000000000000000000000010000000000000000000000000000000000000000000000000000"]}, {s51, data.masks["00000000000000000000000000000000000000000100000000000000000000000000000000000000"]}, {s50, data.masks["00000000000000000000000000000000000000000000010000000000000000000000000000000000"]}, {s52, data.masks["00000000000000000000000000000000000000000000000100000000000000000000000000000000"]}, {s36, data.masks["00000000000000000000000000000000000000000000000000010000000000000000000000000000"]}, {s39, data.masks["00000000000000000000000000000000000000000000000000001000000000000000000000000000"]}, {s41, data.masks["00000000000000000000000000000000000000000000000000000000000100000000000000000000"]}, {s46, data.masks["00000000000000000000000000000000000000000000000000000000000010000000000000000000"]}, {s35, data.masks["00000000000000000000000000000000000000000000000000000000000000100000000000000000"]}, {s53, data.masks["00000000000000000000000000000000000000000000000000000000000000001000000000000000"]}, {s42, data.masks["00000000000000000000000000000000000000000000000000000000000000000000000010000100"]}});
    ctxt_bit t24 = blend_bits({{s103, data.masks["00000000000000000000000000010000000000000000000000000000000000000000000000000000"]}, {s108, data.masks["00000000000000000000000000000000000000000100000000000000000000000000000000000000"]}, {s106, data.masks["00000000000000000000000000000000000000000000010000010000000000001000000000000000"]}, {s101, data.masks["00000000000000000000000000000000000000000000000100000000000010000000000000000000"]}, {s105, data.masks["00000000000000000000000000000000000000000000000000001000000000000000000000000000"]}, {s97, data.masks["00000000000000000000000000000000000000000000000000000000000100000000000000000000"]}, {v10, data.masks["00000000000000000000000000000000000000000000000000000000000000100000000000000000"]}, {s99, data.masks["00000000000000000000000000000000000000000000000000000000000000000000000010000100"]}});
    ctxt_bit v11 = t23;
    v11.multiplyBy(t24);
    show(v11);
    ctxt_bit s109 = v11;
    info.context.getEA().rotate(s109, -76);
    show(s109);
    ctxt_bit s110 = v11;
    info.context.getEA().rotate(s110, -21);
    show(s110);
    ctxt_bit s111 = v11;
    info.context.getEA().rotate(s111, -11);
    show(s111);
    ctxt_bit s112 = v11;
    info.context.getEA().rotate(s112, -20);
    show(s112);
    ctxt_bit s113 = v11;
    info.context.getEA().rotate(s113, -4);
    show(s113);
    ctxt_bit s114 = v11;
    info.context.getEA().rotate(s114, -38);
    show(s114);
    ctxt_bit s115 = v11;
    info.context.getEA().rotate(s115, -10);
    show(s115);
    ctxt_bit s116 = v11;
    info.context.getEA().rotate(s116, -1);
    show(s116);
    ctxt_bit t25 = blend_bits({{s71, data.masks["00000000000000000000100000000000000000000000000000000000000000000000000000000000"]}, {s61, data.masks["00000000000000000000010001000000000000000000000000000000000000000000000000000100"]}, {s75, data.masks["00000000000000000000000000010000000000000000000000000000000000000000000000000000"]}, {s63, data.masks["00000000000000000000000000000000001000000000000000000000010000000000000000000000"]}, {s74, data.masks["00000000000000000000000000000000000000000000000000100000000000000000000000000000"]}, {s76, data.masks["00000000000000000000000000000000000000000000000000000000001000000000000000000000"]}, {s69, data.masks["00000000000000000000000000000000000000000000000000000000000001000000000000000000"]}, {s68, data.masks["00000000000000000000000000000000000000000000000000000000000000000010000000000000"]}, {s64, data.masks["00000000000000000000000000000000000000000000000000000000000000000000000000010000"]}});
    ctxt_bit t26 = blend_bits({{s98, data.masks["00000000000000000000100000000000000000000000000000000000000000000010000000000000"]}, {s103, data.masks["00000000000000000000010000000000000000000000000000000000000000000000000000000000"]}, {s102, data.masks["00000000000000000000000001000000000000000000000000000000000000000000000000010100"]}, {s104, data.masks["00000000000000000000000000010000000000000000000000000000000000000000000000000000"]}, {s99, data.masks["00000000000000000000000000000000001000000000000000000000000000000000000000000000"]}, {s97, data.masks["00000000000000000000000000000000000000000000000000100000000000000000000000000000"]}, {s100, data.masks["00000000000000000000000000000000000000000000000000000000010000000000000000000000"]}, {s107, data.masks["00000000000000000000000000000000000000000000000000000000001000000000000000000000"]}, {s101, data.masks["00000000000000000000000000000000000000000000000000000000000001000000000000000000"]}});
    ctxt_bit v12 = t25;
    v12.multiplyBy(t26);
    show(v12);
    ctxt_bit s117 = v12;
    info.context.getEA().rotate(s117, -59);
    show(s117);
    ctxt_bit s118 = v12;
    info.context.getEA().rotate(s118, -74);
    show(s118);
    ctxt_bit s119 = v12;
    info.context.getEA().rotate(s119, -53);
    show(s119);
    ctxt_bit s120 = v12;
    info.context.getEA().rotate(s120, -20);
    show(s120);
    ctxt_bit s121 = v12;
    info.context.getEA().rotate(s121, -10);
    show(s121);
    ctxt_bit s122 = v12;
    info.context.getEA().rotate(s122, -38);
    show(s122);
    ctxt_bit s123 = v12;
    info.context.getEA().rotate(s123, -21);
    show(s123);
    ctxt_bit s124 = v12;
    info.context.getEA().rotate(s124, -27);
    show(s124);
    ctxt_bit s125 = v12;
    info.context.getEA().rotate(s125, -43);
    show(s125);
    ctxt_bit t27 = blend_bits({{s114, data.masks["00000000000000100000000000000000000000000000000000000000000000000000000000000000"]}, {s110, data.masks["00000000000000000000100000000000000000000100000000000000000000000000000000000000"]}, {s112, data.masks["00000000000000000000000000010000000000001000000000000000000000000000000000000000"]}, {s109, data.masks["00000000000000000000000000000001000000000000000000000000000000000000000000000000"]}, {s111, data.masks["00000000000000000000000000000000001000000000000010000000000000000010000000000000"]}, {s113, data.masks["00000000000000000000000000000000000000000000000100000000000000000000000000000000"]}, {s115, data.masks["00000000000000000000000000000000000000000000000000000010000000000000000000000000"]}, {s116, data.masks["00000000000000000000000000000000000000000000000000000000000000000000000100000000"]}});
    ctxt_bit t28 = blend_bits({{s120, data.masks["00000000000000100000000000000000000000000000000000000000000000000000000000000000"]}, {s122, data.masks["00000000000000000000100000000000000000000000000000000000000000000000000000000000"]}, {s118, data.masks["00000000000000000000000000010001000000000000000000000000000000000000000000000000"]}, {s125, data.masks["00000000000000000000000000000000001000000000000000000000000000000000000000000000"]}, {s123, data.masks["00000000000000000000000000000000000000001000000000000000000000000000000000000000"]}, {s117, data.masks["00000000000000000000000000000000000000000100000000000000000000000000000100000000"]}, {s121, data.masks["00000000000000000000000000000000000000000000000100000000000000000000000000000000"]}, {s124, data.masks["00000000000000000000000000000000000000000000000010000000000000000000000000000000"]}, {s119, data.masks["00000000000000000000000000000000000000000000000000000010000000000000000000000000"]}, {v12, data.masks["00000000000000000000000000000000000000000000000000000000000000000010000000000000"]}});
    ctxt_bit v13 = t27;
    v13 += t28;
    show(v13);
    ctxt_bit s126 = v13;
    info.context.getEA().rotate(s126, -25);
    show(s126);
    ctxt_bit s127 = v13;
    info.context.getEA().rotate(s127, -36);
    show(s127);
    ctxt_bit s128 = v13;
    info.context.getEA().rotate(s128, -12);
    show(s128);
    ctxt_bit s129 = v13;
    info.context.getEA().rotate(s129, -11);
    show(s129);
    ctxt_bit s130 = v13;
    info.context.getEA().rotate(s130, -4);
    show(s130);
    ctxt_bit s131 = v13;
    info.context.getEA().rotate(s131, -7);
    show(s131);
    ctxt_bit t29 = blend_bits({{s44, data.masks["00000000000000000001000000000000000000000000000000000000000000000000000000000000"]}, {s64, data.masks["00000000000000000000000100000000000000000000000000000000000000000000000000000000"]}, {s47, data.masks["00000000000000000000000000000000001000000000000000000000000000000000000000000000"]}, {s74, data.masks["00000000000000000000000000000000000100000000000000000000000000100000000000000000"]}, {s60, data.masks["00000000000000000000000000000000000010000000000000000000000000000000000000000000"]}, {s66, data.masks["00000000000000000000000000000000000001000000000000000000000000000000000000000000"]}, {s50, data.masks["00000000000000000000000000000000000000000000000100000000000000000000000000000000"]}, {s73, data.masks["00000000000000000000000000000000000000000000000000000000000000000000000100000000"]}, {s40, data.masks["00000000000000000000000000000000000000000000000000000000000000000000000000010000"]}});
    ctxt_bit t30 = blend_bits({{s128, data.masks["00000000000000000001000000000000000100000000000000000000000000000000000000000000"]}, {s129, data.masks["00000000000000000000000100000000000001000000000000000000000000000000000000000000"]}, {s131, data.masks["00000000000000000000000000000000001000000000000100000000000000000000000000000000"]}, {s130, data.masks["00000000000000000000000000000000000010000000000000000000000000100000000000000000"]}, {s127, data.masks["00000000000000000000000000000000000000000000000000000000000000000000000100000000"]}, {s126, data.masks["00000000000000000000000000000000000000000000000000000000000000000000000000010000"]}});
    ctxt_bit v14 = t29;
    v14.multiplyBy(t30);
    show(v14);
    ctxt_bit s132 = v14;
    info.context.getEA().rotate(s132, -61);
    show(s132);
    ctxt_bit s133 = v14;
    info.context.getEA().rotate(s133, -67);
    show(s133);
    ctxt_bit s134 = v14;
    info.context.getEA().rotate(s134, -66);
    show(s134);
    ctxt_bit s135 = v14;
    info.context.getEA().rotate(s135, 5);
    show(s135);
    ctxt_bit s136 = v14;
    info.context.getEA().rotate(s136, -72);
    show(s136);
    ctxt_bit s137 = v14;
    info.context.getEA().rotate(s137, -33);
    show(s137);
    ctxt_bit t31 = blend_bits({{s35, data.masks["00000000000000000000000000000000000000000000000000000000000000000000010000000000"]}, {s53, data.masks["00000000000000000000000000000000000000000000000000000000000000000000000100000000"]}});
    ctxt_bit t32 = blend_bits({{s126, data.masks["00000000000000000000000000000000000000000000000000000000000000000000010000000000"]}, {v13, data.masks["00000000000000000000000000000000000000000000000000000000000000000000000100000000"]}});
    ctxt_bit v15 = t31;
    v15.multiplyBy(t32);
    show(v15);
    ctxt_bit s138 = v15;
    info.context.getEA().rotate(s138, -33);
    show(s138);
    ctxt_bit s139 = v15;
    info.context.getEA().rotate(s139, -42);
    show(s139);
    ctxt_bit t33 = blend_bits({{s132, data.masks["00000000000000000000000000000000000000100000000000000000000000000000000000000000"]}, {s134, data.masks["00000000000000000000000000000000000000000000000010000000000000000000000000000000"]}});
    ctxt_bit t34 = blend_bits({{s137, data.masks["00000000000000000000000000000000000000100000000000000000000000000000000000000000"]}, {s133, data.masks["00000000000000000000000000000000000000000000000010000000000000000000000000000000"]}});
    ctxt_bit v16 = t33;
    v16 += t34;
    show(v16);
    ctxt_bit t35 = blend_bits({{s139, data.masks["00000000000000000000000000000100000000000000000000000000000000000000000000000000"]}, {s138, data.masks["00000000000000000000000000000000000010000000000000000000000000000000000000000000"]}});
    ctxt_bit t36 = blend_bits({{s137, data.masks["00000000000000000000000000000100000000000000000000000000000000000000000000000000"]}, {s133, data.masks["00000000000000000000000000000000000010000000000000000000000000000000000000000000"]}});
    ctxt_bit v17 = t35;
    v17 += t36;
    show(v17);
    ctxt_bit t37 = blend_bits({{s137, data.masks["00000000000000000000000000000000000000000010000000000000000000000000000000000000"]}, {s136, data.masks["00000000000000000000000000000000000000000000000000000001000000000000000000000000"]}});
    ctxt_bit t38 = blend_bits({{s135, data.masks["00000000000000000000000000000000000000000010000000000000000000000000000000000000"]}, {s132, data.masks["00000000000000000000000000000000000000000000000000000001000000000000000000000000"]}});
    ctxt_bit v18 = t37;
    v18 += t38;
    show(v18);
    return std::vector<ctxt_bit>{ 16, 17, 18 };
}
    