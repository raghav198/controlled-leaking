let merge = \(arr1, i1, len1, arr2, i2, len2, out, j) => {
    if (i1 == len1) {
        if (i2 == len2) {
            out
        } else {
            update out {j := @arr2[i2]} in
            merge(arr1, i1, len1, arr2, (i2+1), len2, out, (j+1))
        }
    } else {
        if (i2 == len2) {
            update out {j := @arr1[i1]} in
            merge(arr1, (i1+1), len1, arr2, i2, len2, out, (j+1))
        } else {
            if (@arr1[i1] < @arr2[i2]) {
                update out {j := @arr1[i1]} in
                merge(arr1, (i1+1), len1, arr2, i2, len2, out, (j+1))
            } else {
                update out {j := @arr2[i2]} in
                merge(arr1, i1, len1, arr2, (i2+1), len2, out, (j+1))
            }
        }
    }
} in
let arr1 = &[0:4] in
let arr2 = &[5:9] in
let out = new[10] in
merge(arr1, 0, 5, arr2, 0, 5, out, 0)
